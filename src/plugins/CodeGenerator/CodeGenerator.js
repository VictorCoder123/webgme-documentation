/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 0.14.0 from webgme on Tue Nov 03 2015 16:19:37 GMT-0600 (CST).
 */

define([
    'plugin/PluginConfig',
    'plugin/PluginBase',
    'common/util/ejs',
    'plugin/CodeGenerator/CodeGenerator/Templates/Templates'
], function (
    PluginConfig,
    PluginBase,
    ejs,
    TEMPLATES) {
    'use strict';

    /**
     * Initializes a new instance of CodeGenerator.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin CodeGenerator.
     * @constructor
     */
    var CodeGenerator = function () {
        // Call base class' constructor.
        PluginBase.call(this);
    };

    // Prototypal inheritance from PluginBase.
    CodeGenerator.prototype = Object.create(PluginBase.prototype);
    CodeGenerator.prototype.constructor = CodeGenerator;

    /**
     * Gets the name of the CodeGenerator.
     * @returns {string} The name of the plugin.
     * @public
     */
    CodeGenerator.prototype.getName = function () {
        return 'Finite State Machine Code Generator';
    };

    /**
     * Gets the semantic version (semver.org) of the CodeGenerator.
     * @returns {string} The version of the plugin.
     * @public
     */
    CodeGenerator.prototype.getVersion = function () {
        return '0.1.0';
    };

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    CodeGenerator.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this,
            nodeObject;


        // Using the logger.
        self.logger.debug('This is a debug message.');
        self.logger.info('This is an info message.');
        self.logger.warn('This is a warning message.');
        self.logger.error('This is an error message.');

        // Using the coreAPI to make changes.

        nodeObject = self.activeNode;

        if (self.core.getPath(self.activeNode) === '' ||
            self.isMetaTypeOf(self.activeNode, self.META.UMLStateMachine) === false){
            callback('activeNode is not a state-machine', self.result);
            return;
        }

        self.core.loadSubTree(self.activeNode, function(err, nodeList){
            if(err){
                callback(err);
                return;
            }
            var i,
                nodePath,
                nodes = {};

            for(i=0; i<nodeList.length; i++){
                nodePath = self.core.getPath(nodeList[i]);
                nodes[nodePath] = nodeList[i];
                self.logger.info(nodePath);
            }

            var childernPaths = self.core.getChildrenPaths(self.activeNode);
            var dataModel = {
                stateMachine: {
                    id: self.core.getPath(self.activeNode),
                    name: self.core.getAttribute(self,activeNode, 'name'),
                    initialState: null,
                    finalStates: [],
                    states: []
                }
            }

            for(i=0; i<childernPaths.length; i++){
                var childNode = nodes[childernPaths[i]];
                self.logger.info(self.core.getAttribute(childNode, 'name'));
                if(self.isMetaTypeOf(childNode, self.META.initial) === true){
                    dataModel.stateMachine.initialState = childernPaths[i];
                }
                else if(self.isMetaTypeOf(childNode, self.META.End)){
                    dataModel.stateMachine.finalStates.push(childernPaths[i]);
                }

                if(self.isMetaTypeOf(childNode, self.META.StateBase)){
                    var stateData = {
                        id: childernPaths[i],
                        name: self.core.getAttribute(childNode, 'name'),
                        transitions: []
                    };
                    dataModel.stateMachine.states.push(stateData);
                }
            }
            var dataStr = JSON.stringify(dataModel, null, 4);
            self.logger.info(dataStr);
            self.result.setSuccess(true);
            callback(null, self.result);
        });

        return;

        self.core.setAttribute(nodeObject, 'name', 'My new obj');
        self.core.setRegistry(nodeObject, 'position', {x: 70, y: 70});


        // First transform ejs-files into js files (needed for client-side runs) -> run Templates/combine_templates.js.
        // See instructions in file. You must run this after any modifications to the ejs template.
        var templatePY = ejs.render(TEMPLATES['Python.py.ejs'], {a: 'a', b: 'b'});
        var templateFileName = 'generatedFiles/subDir/Python.py';
        var artifact = self.blobClient.createArtifact('templateFiles');
        artifact.addFile(templateFileName, templatePY, function (err) {
            if (err) {
                callback(err, self.result);
                return;
            }
            self.blobClient.saveAllArtifacts(function (err, hashes) {
                if (err) {
                    callback(err, self.result);
                    return;
                }
                // This will add a download hyperlink in the result-dialog.
                self.result.addArtifact(hashes[0]);
                // This will save the changes. If you don't want to save;
                // exclude self.save and call callback directly from this scope.
                self.save('Finite State Machine Code Generator updated model.', function (err) {
                    if (err) {
                        callback(err, self.result);
                        return;
                    }
                    self.result.setSuccess(true);
                    callback(null, self.result);
                });
            });
        });

    };

    return CodeGenerator;
});